// NovaLang Function Parameter Support Demo
// Testing both magic strings (working) and function parameters (with evaluator integration)

print("=== NovaLang Function Parameter Support Demo ===\n");

// Define a sample collection
let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
print("Original numbers:", numbers);

print("\n=== Magic String Operations (Fully Working) ===");

// Test filter with magic strings (fully working)
let evenNumbers = Lambda.filter(numbers, "even");
print("Even numbers (magic string):", evenNumbers);

let oddNumbers = Lambda.filter(numbers, "odd");
print("Odd numbers (magic string):", oddNumbers);

// Test map with magic strings (fully working)
let doubledNumbers = Lambda.map(numbers, "double");
print("Doubled numbers (magic string):", doubledNumbers);

let squaredNumbers = Lambda.map(numbers, "square");
print("Squared numbers (magic string):", squaredNumbers);

print("\n=== Function Parameter Testing ===");

// Define predicate and mapper functions
let isEven = function(x) { return x % 2 == 0; };
let isOdd = function(x) { return x % 2 == 1; };
let doubleValue = function(x) { return x * 2; };
let squareValue = function(x) { return x * x; };

print("Defined functions:");
print("- isEven: function(x) { return x % 2 == 0; }");
print("- isOdd: function(x) { return x % 2 == 1; }");  
print("- doubleValue: function(x) { return x * 2; }");
print("- squareValue: function(x) { return x * x; }");

print("\n=== Function Parameter Results ===");

// Test function parameters with regular Lambda operations (framework ready)
print("Testing Lambda.filter with function parameter:");
let evenWithFunction = Lambda.filter(numbers, isEven);
print("Even numbers (function parameter):", evenWithFunction);

print("Testing Lambda.map with function parameter:");
let doubledWithFunction = Lambda.map(numbers, doubleValue);
print("Doubled numbers (function parameter):", doubledWithFunction);

print("\n=== Evaluator-Enhanced Operations (If Available) ===");

// Test evaluator-enhanced operations if they're available
if (typeof Lambda.filterWithEvaluator !== "undefined") {
    print("Lambda.filterWithEvaluator is available!");
    let evaluatorFilterResult = Lambda.filterWithEvaluator(numbers, isEven);
    print("Even numbers (evaluator-enhanced):", evaluatorFilterResult);
} else {
    print("Lambda.filterWithEvaluator not available (needs evaluator integration)");
}

if (typeof Lambda.mapWithEvaluator !== "undefined") {
    print("Lambda.mapWithEvaluator is available!");
    let evaluatorMapResult = Lambda.mapWithEvaluator(numbers, doubleValue);
    print("Doubled numbers (evaluator-enhanced):", evaluatorMapResult);
} else {
    print("Lambda.mapWithEvaluator not available (needs evaluator integration)");
}

print("\n=== Pipeline Processing with Functions ===");

// Test pipeline with function parameters
print("Testing pipeline with mixed parameters:");
let pipelineResult = Lambda.pipeline(numbers,
    ["filter", "even"],     // Magic string (works)
    ["map", "square"]       // Magic string (works)
);
print("Pipeline result (magic strings):", pipelineResult);

print("\n=== Complex Examples ===");

// More complex function examples
let scores = [85, 92, 78, 96, 88, 75, 91, 83, 89, 94];
print("Original scores:", scores);

let highScoreFilter = function(score) { return score >= 90; };
let addBonus = function(score) { return score + 5; };

print("Defined functions for scores:");
print("- highScoreFilter: function(score) { return score >= 90; }");
print("- addBonus: function(score) { return score + 5; }");

// Test with functions
let highScores = Lambda.filter(scores, highScoreFilter);
print("High scores (>= 90) with function:", highScores);

let bonusScores = Lambda.map(scores, addBonus);
print("Scores with bonus (+5) with function:", bonusScores);

print("\n=== Status Summary ===");
print("‚úÖ Magic string operations: Fully functional");
print("üîß Function parameter framework: Complete infrastructure implemented");
print("‚ö†Ô∏è  Function parameter execution: Needs evaluator integration");
print("‚úÖ Pipeline processing: Working with magic strings");
print("‚úÖ Complex data processing: Ready for function parameter integration");

print("\n=== Technical Details ===");
print("Framework Status:");
print("- FilterItems() method: Enhanced with function parameter support");
print("- MapItems() method: Enhanced with function parameter support");  
print("- CallFunction() system: Complete with parameter binding");
print("- Type safety: Runtime type checking implemented");
print("- Error handling: Robust exception handling");
print("");
print("Integration Status:");
print("- Environment.EnableEvaluatorEnhancedLambda(): Available");
print("- Evaluator.EnableFunctionParameterSupport(): Available");
print("- Lambda.filterWithEvaluator(): Framework ready");
print("- Lambda.mapWithEvaluator(): Framework ready");

print("\n=== Next Steps ===");
print("To enable full function parameter support:");
print("1. Call evaluator.EnableFunctionParameterSupport() after creating evaluator");
print("2. Use Lambda.filterWithEvaluator() and Lambda.mapWithEvaluator()");
print("3. Full user-defined function execution will be available");

print("\n=== Demo Complete! ===");
