// NovaLang Lambda-Style Query Operations Demo
// =============================================
// This example demonstrates functional data processing with lambda-style query operations

console.log("=== NovaLang Lambda-Style Query Operations Demo ===");
console.log("");

// 1. Basic Filter Operations
console.log("1. Basic Lambda Filter Operations:");
let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
console.log("Original numbers:", numbers);

let evens = Lambda.filter(numbers, "even");
console.log("Even numbers:", evens);

let odds = Lambda.filter(numbers, "odd");
console.log("Odd numbers:", odds);

let positives = Lambda.filter([-2, -1, 0, 1, 2], "positive");
console.log("Positive numbers:", positives);

console.log("");

// 2. Basic Map Operations
console.log("2. Basic Lambda Map Operations:");
let smallNumbers = [1, 2, 3, 4, 5];
console.log("Original:", smallNumbers);

let doubled = Lambda.map(smallNumbers, "double");
console.log("Doubled:", doubled);

let squared = Lambda.map(smallNumbers, "square");
console.log("Squared:", squared);

let words = ["hello", "world", "novalang"];
console.log("Original words:", words);

let upperWords = Lambda.map(words, "upper");
console.log("Uppercase:", upperWords);

let lengths = Lambda.map(words, "length");
console.log("Lengths:", lengths);

console.log("");

// 3. Sorting Operations
console.log("3. Lambda Sort Operations:");
let unsorted = [5, 2, 8, 1, 9, 3];
console.log("Original:", unsorted);

let ascending = Lambda.sort(unsorted, "asc");
console.log("Ascending:", ascending);

let descending = Lambda.sort(unsorted, "desc");
console.log("Descending:", descending);

console.log("");

// 4. Aggregation Operations
console.log("4. Lambda Aggregation Operations:");
let values = [10, 20, 30, 40, 50];
console.log("Values:", values);

let count = Lambda.count(values);
console.log("Count:", count);

let sum = Lambda.sum(values);
console.log("Sum:", sum);

let average = Lambda.average(values);
console.log("Average:", average);

let min = Lambda.min(values);
console.log("Min:", min);

let max = Lambda.max(values);
console.log("Max:", max);

console.log("");

// 5. Collection Position Operations
console.log("5. Lambda Position Operations:");
let items = ["first", "second", "third", "fourth", "fifth"];
console.log("Items:", items);

let first = Lambda.first(items);
console.log("First:", first);

let last = Lambda.last(items);
console.log("Last:", last);

let skipped = Lambda.skip(items, 2);
console.log("Skip 2:", skipped);

let taken = Lambda.take(items, 3);
console.log("Take 3:", taken);

console.log("");

// 6. Utility Operations
console.log("6. Lambda Utility Operations:");
let mixed = [1, 2, 2, 3, 3, 3, 4, 4, 5];
console.log("Original:", mixed);

let unique = Lambda.distinct(mixed);
console.log("Distinct:", unique);

let reversed = Lambda.reverse(mixed);
console.log("Reversed:", reversed);

console.log("");

// 7. Working with Different Collection Types
console.log("7. Lambda with Different Collection Types:");

// ArrayList
let arrayList = ArrayList.create();
ArrayList.add(arrayList, 10);
ArrayList.add(arrayList, 20);
ArrayList.add(arrayList, 30);
console.log("ArrayList:", arrayList);

let doubledList = Lambda.map(arrayList, "double");
console.log("Doubled ArrayList:", doubledList);

// Dictionary values
let dict = Dictionary.create();
Dictionary.set(dict, "a", 1);
Dictionary.set(dict, "b", 2);
Dictionary.set(dict, "c", 3);
let dictValues = Dictionary.values(dict);
console.log("Dictionary values:", dictValues);

let squaredValues = Lambda.map(dictValues, "square");
console.log("Squared values:", squaredValues);

console.log("");

// 8. Chaining Lambda Operations
console.log("8. Chaining Lambda Operations:");
let dataset = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
console.log("Original dataset:", dataset);

// Chain: filter evens, double them, sort descending, take first 5
let evenDoubled = Lambda.map(Lambda.filter(dataset, "even"), "double");
console.log("Even numbers doubled:", evenDoubled);

let sorted = Lambda.sort(evenDoubled, "desc");
console.log("Sorted descending:", sorted);

let topFive = Lambda.take(sorted, 5);
console.log("Top 5:", topFive);

console.log("");

// 9. String Processing with Lambda
console.log("9. String Processing with Lambda:");
let sentences = ["Hello World", "NovaLang Rocks", "Functional Programming", "Lambda Operations"];
console.log("Original sentences:", sentences);

let nonEmpty = Lambda.filter(sentences, "nonEmpty");
console.log("Non-empty:", nonEmpty);

let lowercase = Lambda.map(sentences, "lower");
console.log("Lowercase:", lowercase);

let wordLengths = Lambda.map(sentences, "length");
console.log("Lengths:", wordLengths);

let avgLength = Lambda.average(wordLengths);
console.log("Average length:", avgLength);

console.log("");

// 10. Advanced Chaining Example
console.log("10. Advanced Lambda Chaining Example:");
let rawData = [-5, -2, 0, 1, 3, 4, 6, 8, 10, 12, 15];
console.log("Raw data:", rawData);

// Complex processing: filter positives, square them, sort, take middle values
let step1 = Lambda.filter(rawData, "positive");
console.log("Step 1 - Positives only:", step1);

let step2 = Lambda.map(step1, "square");
console.log("Step 2 - Squared:", step2);

let step3 = Lambda.sort(step2, "asc");
console.log("Step 3 - Sorted:", step3);

let step4 = Lambda.skip(step3, 2);
console.log("Step 4 - Skip first 2:", step4);

let step5 = Lambda.take(step4, 4);
console.log("Step 5 - Take 4:", step5);

let finalSum = Lambda.sum(step5);
console.log("Final sum:", finalSum);

console.log("");
console.log("=== Lambda Operations Demo Complete ===");
