// NovaLang Feature Demonstration - Proven Working Features
// This demonstrates all confirmed working NovaLang features
// Run with: novalang proven_features.sf

print("🌟 NovaLang Proven Features Demo");
print("=================================");

// ===== 1. VARIABLES AND CONSTANTS =====
print("\n1️⃣ Variables and Constants");
print("---------------------------");

let userName = "Alice";
const PI = 3.14159;
let age = 25;
let isActive = true;
let nothing = null;
let notSet = undefined;

print("String:", userName);
print("Number:", age);
print("Boolean:", isActive);
print("Constant:", PI);
print("Null:", nothing);
print("Undefined:", notSet);

// ===== 2. FUNCTIONS =====
print("\n2️⃣ Functions");
print("------------");

// Regular function declarations work perfectly
function greet(name) {
    return "Hello, " + name + "!";
}

function add(a, b) {
    return a + b;
}

function multiply(x, y) {
    return x * y;
}

print(greet("Bob"));
print("5 + 3 =", add(5, 3));
print("6 * 7 =", multiply(6, 7));

// Function with conditional logic
function getGrade(score) {
    if (score >= 90) {
        return "A";
    } else if (score >= 80) {
        return "B";
    } else if (score >= 70) {
        return "C";
    } else {
        return "F";
    }
}

print("Grade for 85:", getGrade(85));
print("Grade for 95:", getGrade(95));

// ===== 3. DATA STRUCTURES =====
print("\n3️⃣ Data Structures");
print("------------------");

// Arrays work great
let numbers = [1, 2, 3, 4, 5];
let colors = ["red", "green", "blue", "yellow"];
let mixed = [42, "hello", true, null];

print("Numbers:", numbers);
print("Colors:", colors);
print("Mixed:", mixed);
print("First number:", numbers[0]);
print("Last color:", colors[3]);

// Objects work perfectly
let person = {
    name: "Charlie",
    age: 30,
    city: "Seattle",
    skills: ["JavaScript", "Python", "NovaLang"]
};

print("Person:", person);
print("Name:", person.name);
print("Age:", person.age);
print("First skill:", person.skills[0]);

// Nested objects
let company = {
    name: "Tech Corp",
    location: { city: "Portland", state: "OR" },
    employees: 50
};

print("Company:", company.name);
print("Location:", company.location.city + ", " + company.location.state);

// ===== 4. TEMPLATE LITERALS =====
print("\n4️⃣ Template Literals");
print("--------------------");

// Template literals with variable interpolation
print(`User: ${userName}, Age: ${age}`);
print(`${person.name} lives in ${person.city}`);

// Template literals with expressions
let price = 99.99;
let discount = 10;
print(`Original: $${price}, Discounted: $${price - discount}`);
print(`With tax: $${(price - discount) * 1.08}`);

// Complex expressions in templates
print(`In 10 years, ${person.name} will be ${person.age + 10} years old`);

// ===== 5. DESTRUCTURING =====
print("\n5️⃣ Destructuring");
print("----------------");

// Array destructuring
let fruits = ["apple", "banana", "orange"];
let [first, second, third] = fruits;

print("Destructured fruits:");
print("First:", first);
print("Second:", second);
print("Third:", third);

// Array destructuring with rest
let moreItems = ["item1", "item2", "item3", "item4", "item5"];
let [primary, secondary, ...rest] = moreItems;

print("Primary:", primary);
print("Secondary:", secondary);
print("Rest:", rest);

// Object destructuring
let { name, age: personAge, city } = person;
print("Destructured person:");
print("Name:", name);
print("Age:", personAge);
print("City:", city);

// Nested object destructuring
let { location: { city: companyCity, state } } = company;
print("Company location:", companyCity + ", " + state);

// ===== 6. SPREAD SYNTAX =====
print("\n6️⃣ Spread Syntax");
print("----------------");

// Array spread
let arr1 = [1, 2, 3];
let arr2 = [4, 5, 6];
let combined = [...arr1, ...arr2];
let withExtras = [0, ...arr1, 99, ...arr2, 100];

print("Array 1:", arr1);
print("Array 2:", arr2);
print("Combined:", combined);
print("With extras:", withExtras);

// Object spread
let basic = { name: "David", age: 28 };
let contact = { email: "david@test.com", phone: "555-1234" };
let complete = { ...basic, ...contact, active: true };

print("Basic:", basic);
print("Contact:", contact);
print("Complete:", complete);

// ===== 7. CONTROL FLOW =====
print("\n7️⃣ Control Flow");
print("---------------");

// If statements
let score = 88;
if (score >= 90) {
    print("Excellent!");
} else if (score >= 80) {
    print("Good work!");
} else {
    print("Keep trying!");
}

// Logical operators
let hasAccess = true;
let isAdmin = false;
let userAge = 25;

if (hasAccess && userAge >= 18) {
    print("✅ Access granted");
} else {
    print("❌ Access denied");
}

if (isAdmin || hasAccess) {
    print("✅ Can view content");
}

// For loops (with known bounds)
print("Countdown:");
for (let i = 5; i > 0; i = i - 1) {
    print(i);
}
print("🚀 Liftoff!");

// While loop
print("Powers of 2:");
let power = 1;
let exponent = 0;
while (exponent < 6) {
    print("2^" + exponent + " = " + power);
    power = power * 2;
    exponent = exponent + 1;
}

// ===== 8. REAL-WORLD EXAMPLE =====
print("\n8️⃣ Real-World Example: Order Processing");
print("----------------------------------------");

// Customer data
let customer = {
    name: "Alice Johnson",
    email: "alice@example.com",
    address: {
        street: "123 Main St",
        city: "Seattle",
        state: "WA",
        zip: "98101"
    },
    memberLevel: "gold"
};

// Order data
let order = {
    id: "ORD-2025-001",
    items: [
        { name: "Laptop", price: 1299.99, qty: 1 },
        { name: "Mouse", price: 29.99, qty: 2 },
        { name: "Keyboard", price: 89.99, qty: 1 }
    ],
    date: "2025-08-30"
};

// Process order
function processOrder(customerData, orderData) {
    let { name: custName, memberLevel } = customerData;
    let { id: orderId, items, date } = orderData;
    
    print(`📋 Processing Order: ${orderId}`);
    print(`Customer: ${custName} (${memberLevel} member)`);
    print(`Date: ${date}`);
    
    // Calculate totals
    let [item1, item2, item3] = items;
    let subtotal = (item1.price * item1.qty) + (item2.price * item2.qty) + (item3.price * item3.qty);
    
    // Apply member discount
    let discount = 0;
    if (memberLevel === "gold") {
        discount = subtotal * 0.10; // 10% discount
    } else if (memberLevel === "silver") {
        discount = subtotal * 0.05; // 5% discount
    }
    
    let afterDiscount = subtotal - discount;
    let tax = afterDiscount * 0.08; // 8% tax
    let total = afterDiscount + tax;
    
    // Display itemized receipt
    print("\nItemized Receipt:");
    print(`${item1.name}: $${item1.price} x ${item1.qty} = $${item1.price * item1.qty}`);
    print(`${item2.name}: $${item2.price} x ${item2.qty} = $${item2.price * item2.qty}`);
    print(`${item3.name}: $${item3.price} x ${item3.qty} = $${item3.price * item3.qty}`);
    
    print(`\n💰 Order Summary:`);
    print(`Subtotal: $${subtotal}`);
    if (discount > 0) {
        print(`${memberLevel} Discount: -$${discount}`);
    }
    print(`Tax: $${tax}`);
    print(`Total: $${total}`);
    
    // Shipping address
    let { address: { street, city, state, zip } } = customerData;
    print(`\n📦 Shipping to:`);
    print(`${street}`);
    print(`${city}, ${state} ${zip}`);
    
    return { orderId, total, customerName: custName };
}

// Process the order
let result = processOrder(customer, order);
print(`\n✅ Order ${result.orderId} processed for ${result.customerName}`);
print(`Final total: $${result.total}`);

// ===== CONCLUSION =====
print("\n🎉 Feature Demo Complete!");
print("==========================");
print("✅ All demonstrated features are working perfectly:");
print("• Variables and constants");
print("• Function declarations");
print("• Arrays and objects (with nested structures)");
print("• Template literal interpolation");
print("• Array and object destructuring");
print("• Spread syntax for arrays and objects");
print("• Control flow (if/else, for, while loops)");
print("• Complex real-world data processing");
print("\nNovaLang is ready for practical use! 🚀");
